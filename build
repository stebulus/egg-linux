#!/bin/bash
set -euo pipefail
here=$(dirname "${BASH_SOURCE[0]}")
here=$(readlink -f "$here")
bash=$(type -p bash)

echo inside build $PATH

if [ $# -lt 2 ]; then
  echo >&2 "usage: $0 outputdir packagedir [input ...]"
  exit 1
fi
out=$(readlink -f "$1")
shift
package_dir=$(readlink -f "$1")
package_name=$(basename "$package_dir")
shift
inputs=("$@")

if [ -e "$out"/.built ]; then
  shouldBuild=no
  newer=$(find "$package_dir" -newer "$out"/.built)
  if [ -n "$newer" ]; then
    echo >&2 "$0: should build: $package_dir contents are newer than $out"
    shouldBuild=yes
  elif [ ${#inputs[@]} -ne 0 ]; then
    for i in "${inputs[@]}"; do
      if [ "$i"/.built -nt "$out"/.built ]; then
        echo >&2 "$0: should build: $i is newer than $out"
        shouldBuild=yes
        break
      fi
    done
  fi
else
  echo >&2 "$0: should build: $out has not been built"
  shouldBuild=yes
fi

bppm_escape() {
  sed -e 's,%,%#,g' -e 's,=,%+,g' -e 's,:,%.,g'
}

bppm() {
  local bppm
  bppm=
  while [ $# -gt 0 ]; do
    a=$(bppm_escape <<< "$1")
    b=$(bppm_escape <<< "$2")
    bppm="$bppm:$a=$b"
    shift 2
  done
  echo "${bppm#:}"
}

case "$shouldBuild" in
  yes)
    echo >&2 "$0: building: $out"
    unset workdir
    trap '[ -v workdir ] && echo >&2 "leaving behind: $workdir"' EXIT
    workdir=$(mktemp -dt "$package_name".XXXXXX)
    mkdir "$workdir"/tmp
    if [ -d "$out" ]; then
      find "$out" -type d -exec chmod u+w {} +
    fi
    rm -rf "$out"
    (
      if [ -e "$package_dir"/sources ]; then
        while read -r source; do
          source=$(basename "$source")
          source=$(readlink -f "$here/downloads/$source")
          ln -s "$source" "$workdir"
        done <"$package_dir"/sources
      fi
      inputsvars=()
      bppmentries=(
        "/egg-workdir/$package_name" "$workdir"
        "/egg-output/$package_name" "$out"
      )
      if [ ${#inputs[@]} -ne 0 ]; then
        inputspaths=()
        for i in "${inputs[@]}"; do
          name=$(basename "$i")
          fullpath=$(readlink -f "$i")
          inputspaths+=("$fullpath")
          inputsvars+=("${name//-/_}=$fullpath")
          bppmentries+=(/egg-input/"$name" "$fullpath")
        done
        IFS=:
        if [ -v PASS_PATH_THROUGH ] && [ ${#inputspaths[@]} -ne 0 ]; then
          path=$PATH:"${inputspaths[*]/%//bin}"
        elif [ -v PASS_PATH_THROUGH ]; then
          path=$PATH
        elif [ ${#inputspaths[@]} -ne 0 ]; then
          path="${inputspaths[*]/%//bin}"
        else
          path=
        fi
        inputsvars+=(
          CPATH="${inputspaths[*]/%//include}"
          LD_LIBRARY_PATH="${inputspaths[*]/%//lib}"
          LIBRARY_PATH="${inputspaths[*]/%//lib}"
          PATH="$path"
        )
        unset IFS
      fi
      pathmap=$(bppm "${bppmentries[@]}")
      cd "$workdir"
      env -i \
        out="$out" \
        here="$package_dir" \
        SOURCE_DATE_EPOCH=1 \
        BUILD_PATH_PREFIX_MAP="$pathmap" \
        TMPDIR="$workdir"/tmp \
        EGG_JOBS="${EGG_JOBS:-1}" \
        ${inputsvars:+"${inputsvars[@]}"} \
        "$bash" -euo pipefail -- "$package_dir"/build
    )
    if [ ! -v LEAVE_WORKING_DIR ]; then
      echo >&2 "cleaning up: $workdir"
      find "$workdir" -type d -exec chmod u+w {} +
      rm -rf "$workdir"
      unset workdir
    fi
    chmod u+w "$out"
    touch "$out"/.built
    find "$out" ! -type l -exec chmod a-w {} +
    ;;
  no)
    echo >&2 "$0: not building: $out"
    exit 0
    ;;
  *)
    echo >&2 "$0: internal error: $shouldBuild"
    exit 2
    ;;
esac
